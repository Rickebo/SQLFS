using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using Org.BouncyCastle.Crypto;

namespace SQLFS.Database
{
    public class FsDatabase<T> where T : FileBase
    {
        private readonly IDatabaseOptions _options;
        private readonly string _connectionString;
        private readonly T _template;
        private readonly IFileFactory<T> _factory;

        public FsDatabase(IDatabaseOptions options, IFileFactory<T> factory, T templateFile)
        {
            _options = options;
            _template = templateFile;
            _factory = factory;
            _connectionString =
                $"Server={options.Hostname}; database={options.Database}; UID={options.Username}; Password={options.Password}";
        }

        public async Task<DatabaseConnection> GetConnection()
        {
            var connection = new DatabaseConnection(new MySqlConnection(_connectionString));
            await connection.ConnectAsync();

            return connection;
        }

        public async Task<int> DropTables()
        {
            var tables = new []
            { 
                _options.Table
            };

            var count = 0;
            foreach (var name in tables)
                count += await DropTable(name);

            return count;
        }

        public async Task<int> CreateTables()
        {
            var tables = new Dictionary<string, DatabaseTable>()
            {
                { 
                    _options.Table, 
                    new DatabaseTable(_template.Columns)
                }
            };

            var result = 0;
            foreach (var (tableName, columns) in tables)
                result += await CreateTable(tableName, columns).ConfigureAwait(false);

            return result;
        }

        public async Task<int> DropTable(string name)
        {
            await using var connection = await GetConnection();
            await using var command = connection.Command($"DROP TABLE IF EXISTS {name}");

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<int> CreateTable(string name, DatabaseTable table)
        {
            const char newLine = '\n';
            var commandBuilder = new StringBuilder("CREATE TABLE IF NOT EXISTS ")
                .Append(name)
                .Append(" (")
                .Append(newLine);

            var anyColumns = false;
            foreach (var columnName in table.Enumerate(showAutoGenerated: true))
            {
                var column = table.Columns[columnName];

                if (!column.IsCreated)
                    continue;

                anyColumns= true;
                commandBuilder
                    .Append(columnName)
                    .Append(" ")
                    .Append(column.Type)
                    .Append(',');
            }

            if (anyColumns)
                commandBuilder.Length--;

            if (table.Options != null)
            {
                var anyOptions = false;

                foreach (var option in table.Options)
                {
                    if (!anyOptions)
                        commandBuilder.Append(',');

                    anyOptions = true;
                    
                    commandBuilder
                        .Append(option)
                        .Append(',');
                }

                if (anyOptions)
                    commandBuilder.Length--;
            }

            commandBuilder.Append(");");

            await using var connection = await GetConnection();
            await using var command = connection.Command(commandBuilder.ToString());

            int result;

            result = await command.ExecuteNonQueryAsync();

            foreach (var columnName in table.Enumerate())
            {
                var column = table.Columns[columnName];

                if (column.IndexName == null)
                    continue;
                
                await CreateIndex(name, column.IndexName, columnName, column.IndexType);
            }

            return result;
        }

        public async Task<int> CreateIndex(string tableName, string indexName, string indexColumn,
            string indexType = null)
        {
            var sql = $"CREATE INDEX IF NOT EXISTS {indexName} ON {tableName} {(indexType != null ? " USING " + indexType : "")} ({indexColumn})";

            await using var connection = await GetConnection();
            await using var command = connection.Command(sql);

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<int> SaveFile(T file, Func<string, DatabaseColumn, bool> columnSelector = null, bool update = true, bool clear = false)
        {
            var columns = columnSelector != null 
                ? file.Columns
                    .Where(col => col.Value.IsCreated && col.Value.IsSaved && columnSelector(col.Key, col.Value))
                    .Select(col => col.Key)
                : file.Columns
                    .Where(col => col.Value.IsCreated && col.Value.IsSaved)
                    .Select(col => col.Key);

            var columnString = string.Join(",", columns);
            var columnParametersString = string.Join(",", columns.Select(col => "@" + col));

            var savedColumns = file
                .GetColumns((colName, col) => col.IsSaved && !col.IsKeyColumn && 
                                              (columnSelector == null || columnSelector(colName, col)));

            var columnValuesString = string.Join(",", 
                savedColumns.Select(name => name + "=@" + name));

            var clearText = clear
                    ? $"DELETE FROM {_options.Table} WHERE {FileBase.NameColumn} = @{FileBase.NameColumn};"
                    : "";

            var updateText = update ? $" ON DUPLICATE KEY UPDATE {columnValuesString}" : "";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"{clearText}INSERT INTO {_options.Table} ({columnString}) VALUES ({columnParametersString}){updateText}"
            );

            file.Save(command, columns);

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<int> CreateFile(T file, bool update) => 
            await SaveFile(file, (name, col) => name != FileBase.DataColumn, update: update, clear: true);

        public async Task<T> ReadFile(string filename)
        {
            const string param = "@fileName";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"SELECT * FROM {_options.Table} WHERE {FileBase.NameColumn} = {param}"
            );

            command.Parameters.Add(new MySqlParameter(param, MySqlDbType.Text)
            {
                Value = filename
            });

            var commandReader = await command.ExecuteReaderAsync();
            return await ReadOneAsync(commandReader, _factory.Create);
        }

        public async Task<int> DeleteFile(string filename)
        {
            const string param = "@fileName";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"DELETE FROM {_options.Table} WHERE {FileBase.NameColumn} = {param}"
            );

            command.Parameters.Add(new MySqlParameter(param, MySqlDbType.Text)
            {
                Value = filename
            });

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<int> MoveFile(string from, string to, bool replace)
        {
            const string fromParam = "@from";
            const string toParam = "@to";

            var replaceSql = replace
                ? $"DELETE FROM {_options.Table} WHERE {FileBase.NameColumn} = {toParam};"
                : "";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                replaceSql + $"UPDATE {_options.Table} SET {FileBase.NameColumn} = {toParam} WHERE {FileBase.NameColumn} = {fromParam}"
            );

            command.Parameters.Add(new MySqlParameter(fromParam, MySqlDbType.Text)
            {
                Value = from
            });

            command.Parameters.Add(new MySqlParameter(toParam, MySqlDbType.Text)
            {
                Value = to
            });

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<List<T>> FindFiles(string baseFile, string pattern)
        {
            pattern = pattern.Replace("*", "%");
            pattern = baseFile + pattern;

            const string param = "@pattern";
            const string regParam = "@reg";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"SELECT {FileBase.NameColumn}, {FileBase.CreationTimeColumn}, {FileBase.AccessTimeColumn}, {FileBase.LastModifyTimeColumn}, " +
                $"{FileBase.FlagsColumn}, OCTET_LENGTH({FileBase.DataColumn}) AS length FROM {_options.Table} WHERE {FileBase.NameColumn} LIKE {param} AND {FileBase.NameColumn} RLIKE {regParam}"
            );

            command.Parameters.Add(new MySqlParameter(param, MySqlDbType.Text)
            {
                Value = pattern
            });

            command.Parameters.Add(new MySqlParameter(regParam, MySqlDbType.Text)
            {
                Value = $"^{baseFile}" + @"[^\\]*$"
            });

            return await ReadAsync(command.ExecuteReader(), _factory.Create);
        }

        public async Task<T> GetFileInfo(string filename)
        {
            const string param = "@file";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"SELECT {FileBase.NameColumn}, {FileBase.CreationTimeColumn}, {FileBase.AccessTimeColumn}, {FileBase.LastModifyTimeColumn}, " +
                $"{FileBase.FlagsColumn}, OCTET_LENGTH({FileBase.DataColumn}) AS length FROM {_options.Table} WHERE {FileBase.NameColumn} = {param}"
            );

            command.Parameters.Add(new MySqlParameter(param, MySqlDbType.Text)
            {
                Value = filename
            });

            return await ReadOneAsync(command.ExecuteReader(), _factory.Create);
        }

        public async Task<int> UpdateFlags(string filename, FileFlags newFlags)
        {
            const string flagParam = "@flags";
            const string fileParam = "@file";

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"UPDATE {_options.Table} SET {FileBase.FlagsColumn} = {flagParam} WHERE {FileBase.NameColumn} = {fileParam}"
            );

            command.Parameters.Add(new MySqlParameter(flagParam, MySqlDbType.Byte)
            {
                Value = (byte) newFlags
            });

            command.Parameters.Add(new MySqlParameter(fileParam, MySqlDbType.Text)
            {
                Value = filename
            });

            return await command.ExecuteNonQueryAsync();
        }

        public async Task<int> UpdateTime(string filename, DateTime? creationTime = null, DateTime? accessTime = null, DateTime? modifyTime = null)
        {
            const string fileParam = "@file";

            var cols = new List<string>();

            if (creationTime != null)
                cols.Add(FileBase.CreationTimeColumn);

            if (accessTime != null)
                cols.Add(FileBase.AccessTimeColumn);

            if (modifyTime != null)
                cols.Add(FileBase.LastModifyTimeColumn);

            var updateCols = string.Join(",", cols.Select(col => col + " = @" + col));

            await using var connection = await GetConnection();
            await using var command = connection.Command(
                $"UPDATE {_options.Table} SET {updateCols} WHERE {FileBase.NameColumn} = {fileParam}"
            );

            command.Parameters.Add(new MySqlParameter(fileParam, MySqlDbType.Text)
            {
                Value = filename
            });

            if (creationTime != null)
                command.Parameters.Add(new MySqlParameter("@" + FileBase.CreationTimeColumn, MySqlDbType.Timestamp)
                {
                    Value = creationTime.Value
                });

            if (accessTime != null)
                command.Parameters.Add(new MySqlParameter("@" + FileBase.AccessTimeColumn, MySqlDbType.Timestamp)
                {
                    Value = accessTime.Value
                });

            if (modifyTime != null)
                command.Parameters.Add(new MySqlParameter("@" + FileBase.LastModifyTimeColumn, MySqlDbType.Timestamp)
                {
                    Value = modifyTime.Value
                });

            return await command.ExecuteNonQueryAsync();
        }


        private async Task<List<T2>> ReadAsync<T2>(DbDataReader reader, Func<DbDataReader, T2> converter, int? limit = null)
        {
            var results = new List<T2>();

            while (!limit.HasValue || results.Count < limit.Value)
            {
                var value = await ReadOneAsync(reader, converter);
                if (value == null)
                    break;

                results.Add(value);
            }

            return results;
        }

        private async Task<T2> ReadOneAsync<T2>(DbDataReader reader, Func<DbDataReader, T2> converter, bool advance = false) =>
            await reader.ReadAsync()
                ? converter(reader)
                : default;
    }
}
